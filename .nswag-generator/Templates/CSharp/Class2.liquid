/* 
 * Honeybee Schema
 *
 * Contact: info@ladybug.tools
 */

extern alias LBTNewtonSoft;
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonSoft::Newtonsoft.Json;
using LBTNewtonSoft::Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
	{%- if HasDescription -%}
    /// <summary>
    /// {{ Description }}
    /// </summary>
	{%- endif -%}
    [Summary(@"{{ Description }}")]
    [Serializable]
    [DataContract(Name = "{{ ClassName }}")]
    public partial class {{ CsClassName }} :{% if HasInheritance %} {{ Inheritance }},{% endif %} IEquatable<{{ CsClassName }}>, IValidatableObject
    {
    {%- if hasOnlyReadOnly == false -%}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{CsClassName}}" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected {{CsClassName}}() 
        { 
            // Set non-required readonly properties with defaultValue
        {%-  for property in Properties -%}
		    {%- if property.IsReadOnly -%}{%- if property.HasDefault -%}
            this.{{ property.CsPropertyName }} = {{ property.DefaultCodeFormat }};
            {%- endif -%}{%- endif -%}
        {%- endfor -%}
        }
    {%- endif -%}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{ CsClassName }}" /> class.
        /// </summary>
	{%-  for property in AllProperties -%}
        {%- if property.IsReadOnly == false -%}
        /// <param name="{{ property.CsParameterName }}">{{ property.Description }}</param>
        {%- endif -%}
    {%- endfor -%}
    {%- if hasOnlyReadOnly -%}
        [JsonConstructorAttribute]
    {%- endif -%}
    
        public {{ CsClassName }}
        (
            {% assign skipComma = true -%}{% for property in AllProperties -%}{% if property.IsReadOnly == false %}{% if skipComma %}{% assign skipComma = false %}{% else %}, {% endif %}{{ property.ConstructionParameterCode }}{% endif %}{%- endfor %}
        ){%  if HasInheritance %} : base({% assign skipComma = true %}{% for property in ParentProperties -%}{% if property.IsReadOnly == false %}{% if skipComma %}{% assign skipComma = false %}{% else %}, {% endif %}{{ property.CsParameterName }}: {{ property.CsParameterName }}{% endif %}{%- endfor %}){% endif %}
        {
		{%-  for property in Properties -%}
        {%- if property.IsReadOnly == false -%}
            {%- if property.IsValueType -%}
            this.{{ property.CsPropertyName }} = {{ property.CsParameterName }};
            {%- else -%}
            this.{{ property.CsPropertyName }} = {{ property.CsParameterName }}{% if property.HasDefault %} ?? {{ property.DefaultCodeFormat }}{% elsif property.IsRequired %} ?? throw new ArgumentNullException("{{ property.CsParameterName }} is a required property for {{ CsClassName }} and cannot be null"){%- endif -%};
            {%- endif -%}
        {%- endif -%}
		{%- endfor -%}

            // Set non-required readonly properties with defaultValue
		{%-  for property in Properties -%}
		    {%- if property.IsReadOnly and property.IsRequired == false and property.HasDefault -%}
            this.{{ property.CsPropertyName }} = {{ property.DefaultCodeFormat }};
            {%- endif -%}
		{%- endfor -%}

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof({{ CsClassName }}))
                this.IsValid(throwException: true);
        }

	
	{%  for property in Properties %}
        /// <summary>
        /// {{ property.Description }}
        /// </summary>
        [Summary(@"{{ property.Description }}")]
        [DataMember(Name = "{{ property.PropertyName }}")]
        public{% if property.IsInherited %} override{% else %}{% if HasInheritance == false %} virtual{% endif %}{% endif %} {{ property.Type }} {{ property.CsPropertyName }} { get;{% if property.IsReadOnly %} protected{% endif %} set; }{% if property.HasDefault %} = {{ property.DefaultCodeFormat }};{% endif -%}
	{%- endfor -%}


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "{{ CsClassName }}";
        }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("{{ CsClassName }}:\n");
            {%-  for property in AllProperties -%}
            sb.Append("  {{ property.CsPropertyName }}: ").Append(this.{{ property.CsPropertyName }}).Append("\n");
            {%- endfor -%}
            return sb.ToString();
        }


        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>{{ CsClassName }} object</returns>
        public static {{ CsClassName }} FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<{{ CsClassName }}>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }


        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>{{ CsClassName }} object</returns>
        public virtual {{ CsClassName }} Duplicate{{ CsClassName }}()
        {
            return FromJson(this.ToJson());
        }


        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return Duplicate{{ CsClassName }}();
        }


        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return Duplicate{{ CsClassName }}();
        }
     

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as {{ CsClassName }});
        }


        /// <summary>
        /// Returns true if {{ CsClassName }} instances are equal
        /// </summary>
        /// <param name="input">Instance of {{ CsClassName }} to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals({{ CsClassName }} input)
        {
            {%- assign skipComma = true -%}
            if (input == null)
                return false;
            return base.Equals(input){% for property in Properties %} && 
                    Extension.{%- if property.IsArray -%}AllEquals{% else %}Equals{% endif %}(this.{{ property.CsPropertyName }}, input.{{ property.CsPropertyName }}) {%- endfor -%};
        }


        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = {% if HasInheritance %}base.GetHashCode(){% else %}41{% endif %};
                {%-  for property in Properties -%}
                if (this.{{ property.CsPropertyName }} != null)
                    hashCode = hashCode * 59 + this.{{ property.CsPropertyName }}.GetHashCode();
                {%- endfor -%}
                return hashCode;
            }
        }


    {%- if HasInheritance == false -%}
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
    {%- else -%}
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
    {%- endif -%}
            {%- for property in Properties -%}
            {%- if property.HasMaximum -%}
            // {{ property.CsPropertyName }} ({{ property.Type }}) maximum
            if(this.{{ property.CsPropertyName }} > ({{ property.Type }}){{ property.Maximum }})
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{ property.CsPropertyName }}, must be a value less than or equal to {{ property.Maximum }}.", new [] { "{{ property.CsPropertyName }}" });
            }
            {%- endif -%}
            {%- if property.HasMinimum -%}
            // {{ property.CsPropertyName }} ({{ property.Type }}) minimum
            if(this.{{ property.CsPropertyName }} < ({{ property.Type }}){{ property.Minimum }})
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{ property.CsPropertyName }}, must be a value greater than or equal to {{ property.Minimum }}.", new [] { "{{ property.CsPropertyName }}" });
            }
            {%- endif -%}
            {%- if property.HasPattern -%}
            // {{ property.CsPropertyName }} ({{ property.Type }}) pattern
            Regex regexType = new Regex(@"{{ property.Pattern }}", RegexOptions.CultureInvariant);
            if (this.{{ property.CsPropertyName }} != null && false == regexType.Match(this.{{ property.CsPropertyName }}).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{ property.CsPropertyName }}, must match a pattern of " + regexType, new [] { "{{ property.CsPropertyName }}" });
            }
            {%- endif -%}
            {%- endfor -%}
            yield break;
        }
    }
}
